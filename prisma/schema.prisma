generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Master Data Food for App
model AppFood {
  id       String @id @default(uuid())
  name     String
  calories Float // kkal (e.g. 1000kkal)
  carbs    Float // g (e.g. 50g)
  protein  Float // g (e.g. 20g)
  fat      Float // g (e.g. 10g)
  size     Float // g (e.g. 100g)

  appMenus AppMenu[]
}

// Master Data Menu for App
model AppMenu {
  id          String @id @default(uuid())
  name        String
  description String @db.Text()

  appFoods        AppFood[]
  appPlaningMenus AppPlanningMenu[]
}

// Master Data for Planning Menu (planning menu shows in app depends on user preferences)
model AppPlanningMenu {
  id   String   @id @default(uuid())
  type MealType // (e.g. Breakfast, Lunch, Dinner)
  day  Int // (e.g. 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday, 7 = Sunday)

  appMenus        AppMenu[]
  appPrimaryGoals AppPrimaryGoal[] // (for user preference)
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

// Master Data Activity Level
model AppActivityLevel {
  id          String @id @default(uuid())
  name        String // (e.g. Sedentary, Light, Moderate, Active, Very Active)
  description String @db.Text() // (e.g. little to no exercise)
  factor      Float // (e.g. 1.2 = Sedentary, 1.375 = Light, 1.55 = Moderate, 1.725 = Active, 1.9 = Very Active)

  userPreferences UserPreference[]
}

// Master Data Primary Goal
model AppPrimaryGoal {
  id   String @id @default(uuid())
  name String // (e.g. Lose Weight, Maintain Weight, Gain Weight, Build Muscle)

  factor Float // (e.g. 0.8 = Lose Weight, 1.0 = Maintain Weight, 1.15 = Gain Weight, 1.2 = Build Muscle)

  appPlanningMenus AppPlanningMenu[]
  userPreferences  UserPreference[]
}

// User
model User {
  // Credentials
  id       String @id @default(uuid())
  email    String @unique
  password String

  // Profile
  name        String
  picture     String?
  dateOfBirth DateTime
  gender      Gender

  // Preferences
  userPreferences UserPreference[]

  createdAt DateTime @default(now())
}

model UserPreference {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bmr  Float
  tdee Float

  dailyCalories Float
  proteinGoal   Float
  carbsGoal     Float
  fatGoal       Float

  weight Float // kg
  height Float // cm

  appPrimaryGoalId String
  appPrimaryGoal   AppPrimaryGoal @relation(fields: [appPrimaryGoalId], references: [id], onDelete: Cascade)

  appActivityLevelId String
  appActivityLevel   AppActivityLevel @relation(fields: [appActivityLevelId], references: [id], onDelete: Cascade)

  foodLogs FoodLog[]

  startedAt DateTime  @default(now()) // to record start date (creating pref)
  endedAt   DateTime? // to record end date
}

enum Gender {
  M
  F
}

model FoodLog {
  id       String @id @default(uuid())
  name     String
  calories Float // kkal (e.g. 1000kkal)
  carbs    Float // g (e.g. 50g)
  protein  Float // g (e.g. 20g)
  fat      Float // g (e.g. 10g)
  size     Float // g (e.g. 100g)
  portions Float // (e.g. 2 that means 2 * size)

  userPreferencesId String
  userPreferences   UserPreference @relation(fields: [userPreferencesId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
